# Use wev to find keyname or code:key
# yay -S wev

# Modifiers
$ModKey = SUPER     # Main modifier
$Mod1 = SHIFT       # Movement modifier
$Mod2 = CTRL        # Change properties
$Mod3 = ALT         # Window modifier

# Default programs
$Terminal = exec, kitty
$File = exec, thunar
$SearchMenu = exec, pkill wofi || wofi --show drun
$Browser = exec, zen-browser
$EditorText = exec, /usr/share/pycharm/bin/pycharm
$CopyColor = exec, hyprpicker -a
$Waybar = exec, pkill waybar || waybar

$ScreenShot = exec, hyprshot -m output
$WindowShot = exec, hyprshot -m window
$CropSave = exec, hyprshot -m region
$CropClipboard = exec, hyprshot -m region -m active --clipboard-only

$Notification = exec, notify-send "I love Sven"
$Notifications = exec, swaync-client -t -sw
# $Hyprlock = exec, hyprlock -c /home/purple/.config/hypr/ "whatever"       #If you want to move hyprlock path

# # # # # # # #
# KEYBINDINGS #
# # # # # # # #

# bind = $ModKey, Q, $
bind = $ModKey, W, $Waybar
bind = $ModKey, E, $EditorText
# bind = $ModKey, R, $
bind = $ModKey, T, $Terminal
# bind = $ModKey, Y, $
bind = $ModKey, P, $CopyColor

# bind = $ModKey, A, $
bind = $ModKey, S, exec, steam
bind = $ModKey, D, $SearchMenu
bind = $ModKey, F, $File
# bind = $ModKey, G, $
# bind = $ModKey, H, $
bind = $ModKey, L, exec, hyprlock

# bind = $ModKey, Z, $
# bind = $ModKey, X, $
# bind = $ModKey, C, $
# bind = $ModKey, V, $
bind = $ModKey, B, $Browser
bind = $ModKey, N, exec, notion-app
bind = $ModKey, section, $Notifications     # section is your tilde key (code:49)
bind = $Mod3, section, $Notification

# Screenshots
bind =, print, $CropSave
bind = $ModKey, print, $ScreenShot
bind = $Mod2, print, $CropClipboard
bind = $Mod3, print, $WindowShot

# # # # # # # # # #
# Windows | $Mod3 #
# # # # # # # # # #

# System
bind = $Mod3, Q, killactive,            # close active window
bind = $Mod3 $ModKey, Q, exit,
bind = $Mod3, F, fullscreen,
bind = $Mod3, P, pseudo, 		        # Mix between tiling and floating
bind = $Mod3, M, togglesplit, 	        # Change horizontal/vertical stack

# Group
bind = $Mod3, G, togglegroup    # drag and drop windows or open them inside the toggled group
bind = $Mod3 $ModKey, G, changegroupactive, r   # cycle active window in group

# Floating
bind = $Mod3, Space, togglefloating,
bind = $Mod3 $ModKey, Space, exec, hyprctl dispatch workspaceopt allfloat

bind= $Mod3, C, centerwindow,


# Cycle
bind = $Mod3, caps_lock, cyclenext,
bind = $Mod3, T, bringactivetotop,

# Move window
bind = $Mod3 $Mod1, left, movewindow, l
bind = $Mod3 $Mod1, right, movewindow, r
bind = $Mod3 $Mod1, up, movewindow, u
bind = $Mod3 $Mod1, down, movewindow, d

# Focus
bind = $Mod3, left, movefocus,l
bind = $Mod3, right, movefocus,r
bind = $Mod3, up, movefocus,u
bind = $Mod3, down, movefocus,d


bind = $Mod3, H, movefocus,l
bind = $Mod3, J, movefocus,d
bind = $Mod3, K, movefocus,u
bind = $Mod3, L, movefocus,r

# Resize
binde = $Mod3 $Mod2, left, resizeactive,-50 0
binde = $Mod3 $Mod2, right, resizeactive,50 0
binde = $Mod3 $Mod2, up, resizeactive,0 -50
binde = $Mod3 $Mod2, down, resizeactive,0 50

# Move/resize windows with ModKey + LMB/RMB and dragging
bindm = $Mod3, mouse:272, movewindow    # left-click
bindm = $Mod3, mouse:273, resizewindow  # right-click
# bindm = $Mod3, mouse:275,     # side (bottom)
# bindm = $Mod3, mouse:276,     # extra (top)

# # # # # # # #
# Workspaces  #
# # # # # # # #

# Special workspace (scratchpad)
bind = $ModKey, tab, togglespecialworkspace,
bind = $Mod3 $Mod1, tab, movetoworkspace, special
bind = $Mod3, tab, movetoworkspacesilent, special

# Switch workspaces
bind = $ModKey, right, workspace, e+1
bind = $ModKey, left, workspace, e-1

bind = $ModKey, mouse_down, workspace, e+1
bind = $ModKey, mouse_up, workspace, e-1

bind = $ModKey, code:10, workspace, 1
bind = $ModKey, code:11, workspace, 2
bind = $ModKey, code:12, workspace, 3
bind = $ModKey, code:13, workspace, 4
bind = $ModKey, code:14, workspace, 5
bind = $ModKey, code:15, workspace, 6
bind = $ModKey, code:16, workspace, 7
bind = $ModKey, code:17, workspace, 8
bind = $ModKey, code:18, workspace, 9
bind = $ModKey, code:19, workspace, 10

# Move active window to workspace and follow
bind = $Mod3 $Mod1, code:10, movetoworkspace, 1
bind = $Mod3 $Mod1, code:11, movetoworkspace, 2
bind = $Mod3 $Mod1, code:12, movetoworkspace, 3
bind = $Mod3 $Mod1, code:13, movetoworkspace, 4
bind = $Mod3 $Mod1, code:14, movetoworkspace, 5
bind = $Mod3 $Mod1, code:15, movetoworkspace, 6
bind = $Mod3 $Mod1, code:16, movetoworkspace, 7
bind = $Mod3 $Mod1, code:17, movetoworkspace, 8
bind = $Mod3 $Mod1, code:18, movetoworkspace, 9
bind = $Mod3 $Mod1, code:19, movetoworkspace, 10

# Move active window to a workspace without following
bind = $Mod3, code:10, movetoworkspacesilent, 1
bind = $Mod3, code:11, movetoworkspacesilent, 2
bind = $Mod3, code:12, movetoworkspacesilent, 3
bind = $Mod3, code:13, movetoworkspacesilent, 4
bind = $Mod3, code:14, movetoworkspacesilent, 5
bind = $Mod3, code:15, movetoworkspacesilent, 6
bind = $Mod3, code:16, movetoworkspacesilent, 7
bind = $Mod3, code:17, movetoworkspacesilent, 8
bind = $Mod3, code:18, movetoworkspacesilent, 9
bind = $Mod3, code:19, movetoworkspacesilent, 10

# Volume keys for keyboard
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Media or play buttons on keyboard
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous


# bind explanation
# l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# o -> longPress, will trigger on long press of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse.
# t -> transparent, cannot be shadowed by other binds.
# i -> ignore mods, will ignore modifiers.
# s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
# d -> has description, will allow you to write a description for your bind.
# p -> bypasses the app's requests to inhibit keybinds.

